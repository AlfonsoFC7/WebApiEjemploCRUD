@page "/CMetas"
@using WCont_Metas.Client.Data
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory

<h1>Control de Metas</h1>

@if (getClienteError || imetas is null)
{
<p>No se encontro la api.</p> }
            else
            {
<form>
    <label for="lbl_nombres" class="form-label">Nombres</label>
    <input @bind="var_Nombre" type="text" class="form-control" placeholder="Ejemplo: Nombre 1  Nombre 2">
    <label for="lbl_apellidos" class="form-label">Apellidos</label>
    <input @bind="var_Fecha" type="text" class="form-control" placeholder="Ejemplo: Apellido 1  Apellido 2">
    <label for="lbl_direccion" class="form-label">Direccion</label>
    <input @bind="var_IdTarea" type="text" class="form-control" placeholder="Ejemplo: #casa calle avenida lugar">
    <br>
    <button type="button" @onclick="Crear" class="btn btn-info">Crear</button>
    <button type="button" @onclick="Actualizar" class="btn btn-success">Modificar </button>
    <button type="button" @onclick="Eliminar" class="btn btn-danger">Eliminar</button>

</form>

                <table class="table">
                    <tbody>
                        <tr>
                            <th></th>
                            <th>Nombre</th>
                            <th>Fecha</th>
                            <th>IdTarea</th>
                        </tr>
                    </tbody>
                    @foreach (var meta in imetas)
                    {
    <tr>
        <td><button type="button" @onclick="(() => enviarParametros(meta.IdMeta,meta.Nombre,meta.Fecha,meta.IdTarea))" class="btn btn-info"><i class="oi oi-pencil"></i></button></td>
        <td>@meta.Nombre</td>
        <td>@meta.Fecha</td>
        <td>@meta.IdTarea</td>
    </tr>}
                </table>}

@code { private string? url = "https://localhost:7094/api/Clientes";
    private Int32 var_IdMeta;
    private Int32? var_IdTarea;
    private string? var_Nombre, var_direccion;
    private DateTime? var_Fecha;
    // Enviar Parametros a variables locales
    void enviarParametros(Int32 id, string? nom, DateTime? fech, int? IdTar)
    {
        var_IdMeta = id;
        var_Nombre = nom;
        var_Fecha = fech;
        var_IdTarea = IdTar;


    }
    // Crear
    private async Task Crear()
    {
        var metas = ClientFactory.CreateClient();
        var addItem = new METAS { Nombre = var_Nombre, Fecha = var_Fecha, IdTarea = var_IdTarea};
        await metas.PostAsJsonAsync(url, addItem);

        await OnInitializedAsync();
    }
    // Actualizar
    private async Task Actualizar()
    {
        var metas = ClientFactory.CreateClient();
        var addItem = new METAS { IdMeta = var_IdMeta, Nombre = var_Nombre, Fecha = var_Fecha, IdTarea = var_IdTarea};
        await metas.PutAsJsonAsync($"{url}/{var_IdMeta}", addItem);
        //url/var_idcliente
        // https://localhost:7094/api/Clientes/1
        await OnInitializedAsync();
    }
    // Eliminar
    private async Task Eliminar()
    {
        var metas = ClientFactory.CreateClient();
        await metas.DeleteAsync($"{url}/{var_IdMeta}");
        //url/var_idcliente
        // https://localhost:7094/api/Clientes/1
        await OnInitializedAsync();
    }
    private IEnumerable<METAS>? imetas = Array.Empty<METAS>();
    private bool getClienteError;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get,
            url);
        request.Headers.Add("Accept", "application/vnd.github.v3+json");
        request.Headers.Add("User-Agent", "HttpClientFactory-Sample");

        var metas = ClientFactory.CreateClient();

        var response = await metas.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            imetas = await JsonSerializer.DeserializeAsync
                <IEnumerable<METAS>>(responseStream);
        }
        else
        {
            getClienteError = true;
        }

        shouldRender = true;
    } }
